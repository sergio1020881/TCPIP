#include "clientsocket.h"

struct clientsocket* clientsocketcreate(int domain,int type,int protocol, char* server, char* portno)
{ 
  //PROTOTYPES
  int clisocketClose(struct clisocket* cli);
  struct clisocket* cliente;
  cliente=(struct clisocket*)calloc(1,sizeof(struct clisocket));
  switch(domain){
    case AF_LOCAL:
      cliente->serv_addr.sin_family = domain;
      break;
    case AF_INET:
      cliente->serv_addr.sin_family = domain;
      break;
    case AF_INET6:
      cliente->serv_addr.sin_family = domain;
      break;
    case AF_IPX:
      cliente->serv_addr.sin_family = domain;
      break;
    case AF_NETLINK:
      cliente->serv_addr.sin_family = domain;
      break;
    case AF_X25:
      cliente->serv_addr.sin_family = domain;
      break;
    case AF_ATMPVC:
      cliente->serv_addr.sin_family = domain;
      break;
    case AF_APPLETALK:
      cliente->serv_addr.sin_family = domain;
      break;
    case AF_PACKET:
      cliente->serv_addr.sin_family = domain;
      break;
    default:
      fprintf(stderr,"clisocketcreate domain not defined\n");
      exit (0);
  }
  switch(type){
    case SOCK_STREAM:
      break;
    case SOCK_DGRAM:
      break;
    case SOCK_SEQPACKET:
      break;
    case SOCK_RAW:
      break;
    case SOCK_RDM:
      break;
    case SOCK_PACKET:
      break;
    default:
      fprintf(stderr,"clisocketcreate type not defined\n");
      exit (0);
  }
  switch(protocol){
    case 0:
      break;    
    case SOCK_NONBLOCK:
      break;
    case SOCK_CLOEXEC:
      break;
    default:
      fprintf(stderr,"clisocketcreate protocol not defined\n");
      exit (0);
  }
  cliente->server=gethostbyname(server);
  if (cliente->server == NULL){
    fprintf(stderr,"ERROR, no such host\n");
    exit(0);
  }
  
  bcopy((char *)cliente->server->h_addr, (char *)&cliente->serv_addr.sin_addr.s_addr, cliente->server->h_length);
  
  if (portno == NULL){
    fprintf(stderr,"ERROR, no such portno\n");
    exit(0);
  }else{ 
    cliente->portno = atoi(portno);
    cliente->serv_addr.sin_port = htons(cliente->portno);
  }
  
  cliente->id = socket(cliente->serv_addr.sin_family, type, protocol);
  if (cliente->id < 0){ 
    perror("clisocketcreate ERROR opening socket");
    exit(0);
  }
  if (connect(cliente->id,(struct sockaddr *) &cliente->serv_addr,sizeof(cliente->serv_addr)) < 0){
    perror("clisocketcreate ERROR connecting");
    exit(0);
  }
  //vtable
  cliente->Close=clientsocketClose;
  return cliente;
}

int clientsocketClose(struct clisocket* cli)
{
  int RETURN;
  RETURN=close(cli->id);
  if(RETURN<0)
    perror("Close at close");
  return RETURN;
}

